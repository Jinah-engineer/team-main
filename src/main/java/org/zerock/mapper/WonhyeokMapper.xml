<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="org.zerock.mapper.WonhyeokMapper">

<select id="getsearchbystorename" resultType="org.zerock.domain.AddressVO">
SELECT 
	id id,
	storename storename, 
	storeaddress storeaddress,
	storePhonenum storePhonenum, 
	storelat storelat, 
	storelag storelag

FROM storeinfo

WHERE storename like CONCAT('%', #{storename}, '%')
</select>

<select id="getSearchArroundPlaces" resultType="org.zerock.domain.AddressVO">
<![CDATA[

SELECT
	id id,
	storename storename,
	storeaddress storeaddress,
	storePhonenum storePhonenum, 
	storelat storelat,
	storelag storelag
FROM storeinfo 
WHERE storelat > #{storelat} - 0.03 AND storelat < #{storelat} + 0.03 
AND storelag > #{storelag} - 0.03 AND storelag < #{storelag} + 0.03
ORDER BY SQRT(pow(#{storelat} - storelat, 2) + pow(#{storelag} - storelag,2))
LIMIT 6

 ]]>
</select>


<!-- b2bboard xml  -->

<select id="getid" resultType="Int">
SELECT id id
FROM b2bIntroduce
WHERE id = #{id}
</select>


<select id="read" resultType="org.zerock.domain.B2bIntroduceVO">
SELECT
	id id,
	introduce introduce,
	fileName fileName
FROM b2bIntroduce
WHERE id= #{id}
</select>


<insert id="B2bIntroduceRegister">
INSERT INTO b2bIntroduce (id, introduce, storeinfo, fileName)
VALUES (#{id}, #{introduce}, #{storeinfo}, #{fileName})
</insert>

<delete id="deleteById">
DELETE FROM b2bIntroduce
WHERE id = #{id}
</delete>
<!-- b2bIntroduce -->
<select id="getStoreInroducePageInfo" resultType="org.zerock.domain.B2bIntroduceVO">
SELECT
		st.id,
        TRUNCATE(AVG(ur.re_stars), 2) avg,
		st.storeaddress storeaddress,
		st.storename storename,
		st.storePhonenum storePhonenum,
        b.storeinfo storeinfo,
		b.introduce introduce,
		b.fileName fileName
		
FROM user AS u JOIN subscriber AS sub ON u.userid = sub.subsId
				JOIN user_review AS ur ON sub.subsId = ur.re_writer
                JOIN storeinfo AS st ON st.id = sub.storeid
                LEFT JOIN  b2bIntroduce AS b ON b.id = st.id
WHERE st.id =#{id}
</select>


<!-- 구독페이지 xml -->
	<!-- 가게추천정보 -->
	<select id="getNearStoreInfo" resultType="org.zerock.domain.SubscribeViewVO">
	<![CDATA[
	
	SELECT
		s.id id,
		s.storename storename,
		s.storeaddress storeaddress,
		s.storePhonenum storePhonenum, 
		s.storelat storelat,
		s.storelag storelag,
		b.fileName fileName,
		au.auth auth
	FROM storeinfo AS s LEFT JOIN b2bIntroduce AS b ON s.id = b.id 
							JOIN user AS u ON s.userid = u.userid
							JOIN user_auth AS au ON s.userid= au.userid 
	ORDER BY SQRT(pow(#{lat} - s.storelat, 2) + pow(#{lag} - s.storelag,2))
	LIMIT 3
	
	 ]]>
	</select>
	<!-- 가게추천리스트 Modal -->
	<select id="getStoreList" resultType="org.zerock.domain.SubscribeViewVO">
	SELECT
		s.id id,
		s.storename storename,
		s.storeaddress storeaddress,
		s.storePhonenum storePhonenum,
		au.auth auth
	FROM storeinfo AS s JOIN user AS u ON s.userid = u.userid
						JOIN user_auth AS au ON s.userid= au.userid
	</select>
	
	<!-- Search 가게 리스트 -->
	
	<sql id="Search">
     <where>
	     <foreach item="type" collection="typeArr">
	     	<choose>
	     		<when test='type == "S"'>
	     			s.storename LIKE CONCAT('%', #{keyword}, '%');
	     		</when>
	     		<when test='type == "A"'>
	     			s.storeaddress LIKE CONCAT('%', #{keyword}, '%');
	     		</when>
	     	</choose>
	     </foreach>
     </where>	
	</sql>

<select id="getStoreListBySearch" resultType="org.zerock.domain.SubscribeViewVO">
	SELECT
		s.id id,
		s.storename storename,
		s.storeaddress storeaddress,
		s.storePhonenum storePhonenum,
		au.auth auth
	FROM storeinfo AS s JOIN user AS u ON s.userid = u.userid
						JOIN user_auth AS au ON s.userid= au.userid
	<include refid="Search"></include>
	
</select>


<!-- 구독자 정보 저장 -->
<insert id="SaveSubscriberInfo">
INSERT INTO subscriber 
(subsId, subsName, subsAddress, storeid, subsOptions, subsAmount , serviceStartDate)
VALUES (#{subsId}, #{subsName}, #{subsAddress}, #{storeid}, #{subsOptions}, #{subsAmount}, #{serviceStartDate})
</insert>

<!-- 구독정보 최종확인 데이터 갖고오기 -->
<select id="ABCD" resultType="org.zerock.domain.SubsFinalInfoVO">

SELECT 
		subs.subsName subsName,
		subs.subsAddress subsAddress,
		u.userPhonenum userPhonenum,
		u.userNickname userNickname,
		subs.subsAmount subsAmount,
		subs.subsOptions subsOptions,
		st.storename storename,
		st.storeaddress storeaddress,
		st.storePhonenum storePhonenum

FROM subscriber AS subs JOIN user AS u ON subs.subsId = u.userid
						JOIN storeinfo AS st ON subs.storeid = st.id
WHERE subs.subsId = #{userid};
	

</select>

<!-- b2buser의 id로 가게정보 갖고오기 -->
<select id="getStoreInfo" resultType="org.zerock.domain.StoreVO">
SELECT  storename storeName, storeaddress storeUserAddress, storePhonenum storePhonenum
FROM storeinfo
WHERE id = #{id}
</select>

<!-- 구독취소게시판 내용 넣기 -->
<insert id="cancelSubsRegister">
INSERT INTO cancelSubsBoard 
(subsid, title, content)
VALUES
(#{subsid}, #{title}, #{content})

</insert>

<!-- 구독취소리스트 갖고오기 -->
<select id="getReviewList" resultType="org.zerock.domain.cancelSubs.SubsCancelVO">
SELECT
	bno bno,
	subsid subsid,
	title title,
	content content,
	updatedate updatedate
FROM cancelSubsBoard
ORDER BY bno DESC
LIMIT #{from}, #{amount}

</select>

<!-- 구독취소리스트 갖고오기 -->
 <select id="getTotalCount" resultType="int">
  SELECT COUNT(*) FROM cancelSubsBoard
  </select>
  
  <!-- 구독게시판 정보 갖고오기 -->
  <select id="getContentByBno" resultType="org.zerock.domain.cancelSubs.SubsCancelVO">
  SELECT
	bno bno,
	subsid subsid,
	title title,
	content content,
	updatedate updatedate
FROM cancelSubsBoard
WHERE bno = #{bno}
  </select>
  
  <!-- 구독게시판 수정 -->
    <update id="cancelSubsModify">
  	UPDATE cancelSubsBoard
  	
  	SET
  	    title = #{title}, 
  	    content = #{content},
  	    updateDate = NOW()
  	    
  	WHERE
  	    bno = #{bno}
  
  </update>
  <!-- 구독 게시판 삭제 -->
  <delete id="cancelSubsRemove">
  	DELETE FROM cancelSubsBoard WHERE bno = #{bno}
  </delete>
  
  <!-- 구독탈퇴시키기 - 구독자데이터 갖고오기 -->
  <select id="getCancelSubsUserRemove" resultType="org.zerock.domain.SubscriberInfoVO">
 SELECT 
  	sub.subsId subsId,
  	sub.subsName subsName,
  	sub.subsAddress subsAddress,
  	sub.storeid storeid,
  	sub.subsOptions subsOptions,
  	sub.subsAmount subsAmount,
  	sub.payCount payCount,
  	sub.serviceStartDate serviceStartDate,
    u.userPhonenum userPhonenum
  
  FROM subscriber AS sub JOIN user AS u ON sub.subsId = u.userid
  WHERE subsId = #{subsid}
  
  </select>
  
  <!-- 구독탈퇴시키기 - 데이터옮기기 -->
  <insert id="insertCancelSubsUser">
  INSERT INTO subsCancelList
  (userId, userName, userAddress, storeid, subsOptions, subsAmount, payCount, serviceStartDate)
  VALUES
  (#{subsId}, #{subsName}, #{subsAddress}, #{storeid}, #{subsOptions}, #{subsAmount}, #{payCount}, #{serviceStartDate})
  </insert>
  
  <!-- 구독탈퇴시키기 - 구독자테이블 데이터 지우기 -->
  <delete id="cancelSubsUserRemove">
  DELETE FROM subscriber WHERE subsid = #{subsid}
  </delete>
  
  <select id="checkSubsUser" resultType="String">
 SELECT subsId
FROM subscriber
WHERE subsId = #{userid};
  </select>
  
  <select id="checkSubsBoard" resultType="String">
SELECT subsid
FROM cancelSubsBoard
WHERE subsid = #{userid};
  </select>
</mapper>













