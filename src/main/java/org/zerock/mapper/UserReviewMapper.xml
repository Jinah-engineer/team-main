<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="org.zerock.mapper.UserReviewMapper">

<!-- 리뷰 페이지네이션 -->
<sql id="ReviewCriteria">
	<where>
		<foreach item="type" separator="OR" collection="reviewTypeArr">
			<choose>
				<when test='type == "T"'>
					re_title LIKE CONCAT('%', #{keyword}, '%')
				</when>
				<when test='type == "W"'>
					userNickname LIKE CONCAT('%', #{keyword}, '%')
				</when>
				<when test='type == "C"'>
					re_content LIKE CONCAT('%', #{keyword}, '%')
				</when>
			</choose>
		</foreach>
	</where>
</sql>

<!-- 리뷰 전체 목록 -->
<select id="getReviewList" resultType="org.zerock.domain.UserReviewVO">

	<![CDATA[
		SELECT 
			re_bno reBno,
			re_title reTitle,
			re_content reContent,
			re_writer reWriter,
			re_regdate reRegdate,
			re_update reUpdatedate
		FROM user_review
		WHERE re_bno > 0 ORDER BY re_bno DESC
	]]>

</select>

<select id="getAnnounceListWithPaging" resultType="org.zerock.domain.UserReviewVO">

	SELECT
		r.re_bno reBno,
		r.re_title reTitle,
		r.re_content reContent,
		r.re_writer reWriter,
		r.re_regdate reRegdate,
		r.re_updatedate reUpdatedate,
		r.likecount likeCount,
		r.viewcount viewCount,
		r.re_stars reStars,
		u.userNickname reWriterName
	FROM user_review r JOIN user u
	ON r.re_writer = 'admin'
	
	<include refid="ReviewCriteria"></include>
	GROUP BY r.re_bno
	ORDER BY r.re_bno DESC
	LIMIT #{from}, #{amount}

</select>

<select id="getReviewListWithPaging" resultType="org.zerock.domain.UserReviewVO">
	SELECT
		r.re_bno reBno,
		r.re_title reTitle,
		r.re_content reContent,
		r.re_writer reWriter,
		r.re_regdate reRegdate,
		r.re_updatedate reUpdatedate,
		r.likecount likeCount,
		r.viewcount viewCount,
		r.re_stars reStars,
		u.userNickname reWriterName
	FROM user_review r JOIN user u
	ON r.re_writer = u.userid
	
	<include refid="ReviewCriteria"></include>
	GROUP BY r.re_bno
	HAVING r.re_writer != 'admin'
	ORDER BY r.re_bno DESC
	LIMIT #{from}, #{amount}
</select>

<!-- 리뷰 작성 및 레코드 삽입(insert)  -->
<insert id="insertReviewSelectkey" useGeneratedKeys="true" keyColumn="re_bno" keyProperty="reBno">
   INSERT INTO user_review (re_title, re_content, re_writer, re_stars, storename, storeAddress)
   VALUES (#{reTitle}, #{reContent}, #{reWriterName}, #{reStars}, #{storeName}, #{storeAddress})
</insert>

<!-- 리뷰 상세 읽기 -->
<select id="readReview" resultMap="reviewMap">
	SELECT 
		r.re_bno reBno,
		r.re_title reTitle,
		r.re_content reContent,
		r.re_writer reWriter,
		r.re_regdate reRegdate,
		r.re_updatedate reUpdatedate,
		r.likecount likeCount,
		r.viewcount viewCount,
		r.re_stars reStars,
		f.fileName fileName,
		u.userNickname reWriterName 
		
		FROM user_review r
		LEFT JOIN user_review_file f ON r.re_bno = f.bno
			 JOIN user u ON r.re_writer = u.userid
		WHERE 
			r.re_bno = #{reBno}
</select>

<resultMap type="org.zerock.domain.UserReviewVO" id="reviewMap">
<id property="reBno" column="reBno" />
<result property="reTitle" column="reTitle" />
<result property="reContent" column="reContent" />
<result property="reWriter" column="reWriter" />
<result property="reRegdate" column="reRegdate" />
<result property="reUpdatedate" column="reUpdatedate" />
<result property="likeCount" column="likeCount" />
<result property="viewCount" column="viewCount" />
<result property="reStars" column="reStars" />
<result property="reWriterName" column="reWriterName" />
<collection property="fileName" resultMap="fileNameMap"></collection>
</resultMap>

<resultMap type="string" id="fileNameMap">
<result column="fileName" />
</resultMap> 

<!-- 리뷰 수정하기 -->
<update id="updateReview">
	UPDATE user_review r
	SET
		r.re_title = #{reTitle},
		r.re_content = #{reContent},
		r.re_writer = #{reWriterName},
		r.re_stars = #{newReStars},
		r.re_updatedate = NOW()
	WHERE
		re_bno = #{reBno}
</update>

<!-- 게시물 번호에 따른 리뷰 삭제하기 -->
<delete id="deleteReview">
	DELETE FROM user_review
	WHERE re_bno = #{reBno}
</delete>

<!-- 총 리뷰 게시물 수 -->
<select id="getReviewTotalCount" resultType="int">
	SELECT COUNT(*) FROM user_review r JOIN user u
	ON r.re_writer = u.userid
	<include refid="ReviewCriteria"></include>
</select>
 
<!-- 리뷰 조회수 설정하기 -->
 <update id="setViewCount">
	UPDATE user_review r
	 	SET
	 		r.viewcount = r.viewcount + 1
	 	WHERE
	 		r.re_bno = #{reBno}
 </update>
 
<!-- 리뷰 평점 얻어오기 -->
<select id="getReviewStar" resultType="int">
	SELECT IFNULL(re_stars, 0) re_stars 
	FROM user_review
	WHERE 
	 	re_bno = #{reBno}
</select>

<!-- 구독자 정보 얻어오기 -->
<select id="readSubInfo" resultType="org.zerock.domain.SubscriberInfoVO">
	
<!-- 	private String subsId;
	private String subsName;
	private String subsAddress;
	private Integer storeid;
	private String subsOptions;
	private String subsAmount; -->
	
	SELECT 
		sub.subsName subsName,
		sub.subsAddress subsAddress,
		sub.subsOptions subsOptions,
		sub.subsAmount subsAmount,
		u.userAddress userAddress,
		u.userPhonenum userPhonenum,
		u.userNickname userNickname,
		st.storename storeName,
		st.storeaddress storeAddress,
		st.storePhonenum storePhonenum
	FROM
		user u JOIN subscriber sub ON u.userid = sub.subsId
			   JOIN storeinfo st ON st.id = sub.storeid
	WHERE 
		sub.subsId = #{userid}
</select> 

</mapper>