<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="org.zerock.mapper.MemberMapper">

	<insert id="insert">
		INSERT INTO user
		(userid, userpw, userName, userAddress, address, birthDate, userPhonenum, userEmail, userSex, userNickname, lat, lag)
		VALUES
		(#{userid},#{userpw},#{userName},#{userAddress},#{address},#{birthDate},#{userPhonenum},#{userEmail},#{userSex},#{userNickname},#{lat},#{lag})
	</insert>
	
	<insert id="insertb2b">
		INSERT INTO user
		(userid, userpw, userName, userAddress, address, birthDate, userPhonenum, userEmail, userSex, userNickname, lat, lag)
		VALUES
		(#{userid},#{userpw},#{userName},#{userAddress},#{address},#{birthDate},#{userPhonenum},#{userEmail},#{userSex},#{userNickname},#{lat},#{lag})
	</insert>
	
	<insert id="insertemp">
		INSERT INTO user
		(userid, userpw, userName, userAddress, address, birthDate, userPhonenum, userEmail, userSex, userNickname, lat, lag)
		VALUES
		(#{userid},#{userpw},#{userName},#{userAddress},#{address},#{birthDate},#{userPhonenum},#{userEmail},#{userSex},#{userNickname},#{lat},#{lag})
	</insert>
	
	<insert id="insertstoreinfo">
		INSERT INTO storeinfo
		(storename, storeaddress, address, storePhonenum, businessNum, storelat, storelag, userid)
		VALUES
		(#{storeName}, #{storeUserAddress}, #{storeAddress}, #{storePhonenum}, #{businessNum}, #{storelat}, #{storelag}, #{userid})
	</insert>
		
		
	<insert id="insertAuth">
		INSERT INTO user_auth
		(userid, auth)
		VALUES
		(#{userid}, #{auth})
	</insert>
	
	<update id="updateauth">
		UPDATE user_auth
		SET auth = 'ROLE_BLACK'
		WHERE
			userid = #{id}
	</update>
	
	
	
	
	<delete id="removeAuth">
		DELETE FROM user_auth
		WHERE userid = #{userid}
	</delete>

	<delete id="remove">
		DELETE FROM user
		WHERE userid = #{userid}
	</delete>

	<update id="update">
		UPDATE user  
		SET
            userpw = #{userpw},
			userName = #{userName},
			userEmail =#{userEmail}
		WHERE
			userid = #{userid}
	</update>
	
	<select id="read4" resultMap="memberMap">
		SELECT
			m.userid userid,
			m.userName userName,
			m.birthDate birthDate,
			m.userPhonenum userPhonenum,
			m.userEmail userEmail,
			m.userNickname userNickname,
			a.auth auth
		FROM
			user m LEFT JOIN user_auth a ON m.userid = a.userid
		where
		m.userid LIKE CONCAT('%', #{userid}, '%')
		HAVING a.auth != 'ROLE_ADMIN'
	
	</select>

	<select id="read" resultMap="memberMap"> <!-- resultMap에 이 쿼리의 결과가 담기게 된다. -->
		SELECT
			m.userid userid,
			m.userpw userpw,
			m.userName userName,
			m.userAddress userAddress,
			m.address address,
			m.birthDate birthDate,
			m.userPhonenum userPhonenum,
			m.userEmail userEmail,
			m.userSex userSex,
			m.userNickname userNickname,
			si.id id,
			a.auth auth
		FROM
			user m LEFT JOIN user_auth a ON m.userid = a.userid 
				   left join storeinfo si on m.userid = si.userid
		WHERE
			m.userid = #{userid}
	
	</select>
	
	<select id="read2" resultMap="memberMap">
		SELECT
			m.userid userid,
			m.userName userName,
			m.userEmail userEmail
		FROM
			user m
		WHERE
			m.userName = #{userName} AND m.userEmail = #{userEmail}
	</select>
	
	<select id="read3" resultMap="memberMap">
		SELECT
			m.userid userid,
			m.userName userName,
			m.userEmail userEmail
		FROM
			user m
		WHERE
			m.userid = #{userid} AND m.userName = #{userName} AND m.userEmail = #{userEmail}
	</select>
	
	<!-- 책 662쪽 -->
	<resultMap type="org.zerock.domain.MemberVO" id="memberMap">
		<id property="userid" column="userid"/> <!-- userid라는걸 MemberVO에 넣는것! -->
		<result property="userpw" column="userpw"/>
		<result property="userName" column="username"/>
		<result property="userEmail" column="userEmail"/>
		
		<result property="userAddress" column="userAddress"/>
		<result property="address" column="address"/>
		
		<result property="birthDate" column="birthdate"/>
		<result property="userPhonenum" column="userphonenum"/>
		
		<result property="userSex" column="usersex"/>
		<result property="userNickname" column="usernickname"/>
		<result property="id" column="id"/>
		
		<collection property="authList" resultMap="authMap"></collection>
	</resultMap>
	<resultMap type="org.zerock.domain.AuthVO" id="authMap">
		<result property="userid" column="userid"/>
		<result property="auth" column="auth"/>
	</resultMap>
	
	<select id="readsubs" resultMap="memberMap">
		SELECT 
			st.storeaddress storeaddress, 
	        st.storename storename
	    FROM user AS u JOIN subscriber AS sub ON u.userid = sub.subsId 
					   JOIN user_review AS ur ON sub.subsId = ur.re_writer 
	                   JOIN storeinfo AS st ON st.id = sub.storeid 
		WHERE ur.re_writer = #{userid}
	</select>

</mapper>